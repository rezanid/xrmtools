{{~for image in step.images~}}
{{~base_class_name = (plugintype.steps | array.size > 1 ? step.message_name : '') + image.name + (step.primary_entity_definition.display_name.localized_labels[0].label | tokenize)~}}
[EntityLogicalName("{{step.primary_entity_definition.logical_name}}")]
public class {{base_class_name}} : Entity
{
	public static class Meta
	{
		public const string EntityLogicalName = "{{step.primary_entity_definition.logical_name}}";
		public const string EntityLogicalCollectionName = "{{step.primary_entity_definition.logical_collection_name}}";
		public const string EntitySetName = "{{step.primary_entity_definition.entity_set_name}}";
		public const string PrimaryNameAttribute = "{{step.primary_entity_definition.primary_name_atribute}}";
		public const string PrimaryIdAttribute = "{{step.primary_entity_definition.primary_id_attribute}}";

		public partial class Fields
		{
		{{~for attribute in image.message_property_definition.attributes~}}
			public const string {{attribute.schema_name}} = "{{attribute.logical_name}}";
			{{~if attribute.attribute_type == 'Lookup' || attribute.attribute_type == 'Customer'~}}
			public static readonly ReadOnlyCollection<string> {{attribute.schema_name}}Targets =
				new ReadOnlyCollection<string>(new string[] { {{attribute.targets | array.join ',' @quote}} });
			{{~end~}}
		{{~end~}}
		
		{{~ if image.message_property_definition.attributes.size < 32 ~}}
			public static bool TryGet(string logicalName, out string attribute)
			{
				switch (logicalName)
				{
				{{~ for attribute in image.message_property_definition.attributes | array.filter @supported_attribute ~}}
					case nameof({{attribute.schema_name}}): attribute = {{attribute.schema_name}}; return true;
				{{~ end ~}}
					default: attribute = null; return false;
				}
			}
		{{~ else ~}}
			private static readonly Dictionary<string, string> _fieldMap = new Dictionary<string, string>
			{
			{{~ for attribute in image.message_property_definition.attributes | array.filter @supported_attribute ~}}
				{ nameof({{attribute.schema_name}}), {{attribute.schema_name}} },
			{{~ end ~}}
			};

			public static bool TryGet(string logicalName, out string attribute)
			{
				return _fieldMap.TryGetValue(logicalName, out attribute);
			}
		{{~ end ~}}

			public string this[string logicalName]
			{
				get => TryGet(logicalName, out var value)
					? value
					: throw new ArgumentException("Invalid attribute logical name.", nameof(logicalName));
			}
		}

		public partial class OptionSets
		{
		{{~for attribute_meta in image.message_property_definition.attributes | filter_enum_attributes~}}
		{{~if attribute_meta.option_set != null~}}
		{{~if (attribute_meta.option_set.description | get_label 1033)~}}
			/// <summary>
			/// {{attribute_meta.option_set.description | get_label 1033}}
			/// </summary>
		{{~end~}}
			[DataContract]
			{{~enum_name = attribute_meta.option_set.display_name | get_label 1033 | tokenize~}}
			public enum {{enum_name}}
			{
			{{~for option_meta in attribute_meta.option_set.options~}}
				[EnumMember]
				{{option_meta.label | get_label 1033 | tokenize}} = {{option_meta.value}},
			{{~end~}}
			}
		{{~end~}}
		{{~end~}}
		}
	}

	{{~for attribute in image.message_property_definition.attributes | array.filter @supported_attribute~}}
	{{~description = attribute.description | get_label 1033~}}
	/// <summary>
	{{~if description != null && description.length > 0~}}
	/// {{description}}
	{{~end~}}
	{{~ if attribute.attribute_of != null && !attribute.attribute_of.empty?~}}
	/// Attribute of: {{attribute.attribute_of}}
	{{~end~}}
	{{~if attribute.max_length~}}
	/// Max Length: {{attribute.max_length}}
	{{~end~}}
	/// Required Level: {{attribute.required_level.value}}
	/// Valid for: {{~ attribute.is_valid_for_create ? ' Create' : null ~}}{{attribute.is_valid_for_update ? ' Update' : null}}{{attribute.is_valid_for_read ? ' Read' : null}}
	/// </summary>
	{{~prop_name = attribute.schema_name ~}}
	{{~force_readonly = true~}}
	{{include attribute.attribute_type + '.sbncs'}}
{{~end~}}
}
{{~end~}}

