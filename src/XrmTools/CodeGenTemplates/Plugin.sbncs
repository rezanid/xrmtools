{{~func non_logical; ret ($0?.is_logical != true); end~}}
{{~func logical; ret ($0?.is_logical == true); end~}}
{{~func supported_attribute; ret ($0?.attribute_type != 'EntityName'); end~}}
{{~quote(text) = '"' + text + '"'~}}
{{-first_plugin_type = model.plugin_types | array.first~}}
{{~if first_plugin_type.is_nullable_enabled ~}}
#nullable enable
{{~end~}}
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using Microsoft.Xrm.Sdk.Extensions;
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace {{ first_plugin_type?.namespace ?? config.default_namespace }}
{

    {{~for plugintype in model.plugin_types~}}
    {{codegen_attribute}}
    public partial class {{plugintype.type_name | last_segment }}
    {
        {{~dependencies = plugintype.dependency_graph?.dependencies~}}
        {{~include 'InjectDependencies.sbncs'}}

    {{~for step in plugintype.steps~}}
	    {{~target_type_name = (plugintype.steps | array.size > 1 ? step.message_name : '') + 'Target' + (step.primary_entity_definition.display_name.localized_labels[0].label | tokenize)~}}
        {{~target_name = (plugintype.steps | array.size > 1 ? step.message_name : '') + 'Target'~}}
	    {{include 'Target.sbncs' target_type_name}}
	    {{~if step.images~}}
	    {{include 'Images.sbncs'~}}
	    {{~end~}}
	    public {{target_type_name}} {{target_name}} { get; set; }

	    {{~for image in step.images~}}
	    public {{plugintype.steps | array.size > 1 ? step.message_name : ''}}{{image.name}}{{step.primary_entity_definition.display_name.localized_labels[0].label | tokenize}} {{image.name}} { get; set; }
	    {{~end~}}
    {{~end~}}

	    /// <summary>
	    /// This method should be called on every <see cref="{{plugintype.base_type_name == 'Object' ? plugintype.type_name : plugintype.base_type_name}}.Execute(IServiceProvider)"/> execution.
	    /// </summary>
	    /// <param name="serviceProvider"></param>
	    /// <exception cref="InvalidPluginExecutionException"></exception>
        {{~initialize_exists = plugintype.base_type_method_names | array.contains "Initialize"~}}
        internal {{initialize_exists ? 'override ' : '' }}void Initialize(IServiceProvider serviceProvider)
        {
            {{~if initialize_exists~}}
            base.Initialize(serviceProvider);
            {{~end~}}
            if (serviceProvider == null)
            {
                throw new InvalidPluginExecutionException(nameof(serviceProvider) + " argument is null.");
            }
            var executionContext = serviceProvider.Get<IPluginExecutionContext7>();
            {{~for step in plugintype.steps~}}
	        {{~target_type_name = (plugintype.steps | array.size > 1 ? step.message_name : '') + 'Target' + (step.primary_entity_definition.display_name.localized_labels[0].label | tokenize)~}}
            {{~target_name = (plugintype.steps | array.size > 1 ? step.message_name : '') + 'Target'~}}
            {{target_name}} = EntityOrDefault<{{target_type_name}}>(executionContext.InputParameters, "Target");
	        {{~for image in step.images~}}
            {{image.name}} = EntityOrDefault<{{plugintype.steps | array.size > 1 ? step.message_name : ''}}{{image.name}}{{step.primary_entity_definition.display_name.localized_labels[0].label | tokenize}}>(executionContext.PreEntityImages, "{{image.name}}");
	        {{~end~}}
	    {{~end~}}
        }

	    protected static T{{plugintype.is_nullable_enabled ? "?" : ""}} EntityOrDefault<T>(DataCollection<string, object> keyValues, string key) where T : Entity
        {
            if (keyValues is null) return default;
            return keyValues.TryGetValue(key, out var obj) ? obj is Entity entity ? entity.ToEntity<T>() : default : default;
        }

        protected static T{{plugintype.is_nullable_enabled ? "?" : ""}} EntityOrDefault<T>(DataCollection<string, Entity> keyValues, string key) where T : Entity
        {
            if (keyValues is null) return default;
            return keyValues.TryGetValue(key, out var entity) ? entity?.ToEntity<T>() : default;
        }

    {{~if plugintype.custom_api ~}}
    {{~if plugintype.custom_api.request_parameters.size > 0~}}
        protected static {{plugintype.custom_api.request_type_name}} GetRequest(IExecutionContext context)
            => new()
            {
                {{~for param in plugintype.custom_api.request_parameters~}}
                {{~case param.type~}}
                {{~when 'Boolean', 'DateTime', 'Decimal', 'Float', 'Integer'~}}
                {{param.name}} = context.InputParameters.TryGetValue("{{param.name}}", out {{param.full_type_name}} {{param.name | string.downcase}}) ? {{param.name | string.downcase}} : default,
                {{~when 'String'~}}
                {{param.name}} = context.InputParameters.TryGetValue("{{param.name}}", out {{plugintype.is_nullable_enabled ? param.full_type_name : param.full_type_name | string.replace_first "?" "" true}} {{param.name | string.downcase}}) ? {{param.name | string.downcase}} : string.Empty,
                {{~when 'StringArray'~}}
                {{param.name}} = context.InputParameters.TryGetValue("{{param.name}}", out string[] {{param.name | string.downcase}}) ? {{param.name | string.downcase}} : default,
                {{~when 'Picklist'~}}
                {{~converter = param.type_name == 'OptionSetValue' ? (param.name | string.downcase) : '(' + param.full_type_name + ')' + (param.name | string.downcase) + '.Value' ~}}
                {{param.name}} = context.InputParameters.TryGetValue("{{param.name}}", out OptionSetValue {{param.name | string.downcase}}) ? {{converter}} : default,
                {{~else~}}
                {{param.name}} = context.InputParameters.TryGetValue("{{param.name}}", out {{plugintype.is_nullable_enabled ? param.full_type_name : param.full_type_name | string.replace_first "?" "" true}} {{param.name | string.downcase}}) ? {{param.name | string.downcase}} : default,
                {{~end~}}
                {{~end~}}
            };
    {{~end~}}
    {{~if plugintype.custom_api.response_properties.size > 0~}}

        protected static void SetResponse(IExecutionContext context, {{plugintype.custom_api.response_type_name}} response)
        {
            {{~for param in plugintype.custom_api.response_properties~}}
            {{~case param.type~}}
            {{~when 'Picklist'~}}
            {{~converter = param.type_name == 'OptionSetValue' ? (param.name | string.downcase) + 'Value' : 'new OptionSetValue((int)' + (param.name | string.downcase) + 'Value)' ~}}
            if (response.{{param.name}} is {{param.full_type_name}} {{param.name | string.downcase}}Value) context.OutputParameters["{{param.name}}"] = {{converter}};
            {{~when 'StringArray'~}}
            if (response.{{param.name}} is {{param.type_name | string.replace_first "?" "" true}} {{param.name | string.downcase}}Value) context.OutputParameters["{{param.name}}"] = {{param.name | string.downcase}}Value;
            {{~else~}}
            if (response.{{param.name}} is {{param.type_name | string.replace_first "?" "" true}} {{param.name | string.downcase}}Value) context.OutputParameters["{{param.name}}"] = {{param.name | string.downcase}}Value;
            {{~end~}}
            {{~end~}}
        }
    {{~end~}}
    {{~end~}}
    }
    {{~end~}}
}
{{~if first_plugin_type.is_nullable_enabled ~}}#nullable restore{{~end~}}