{{~base_class_name = 'Target' + (step.primary_entity_definition.display_name.localized_labels[0].label | tokenize)~}}
{{codegen_attribute}}
[EntityLogicalName("{{step.primary_entity_definition.logical_name}}")]
public class {{base_class_name}} : Entity
{
	public static class Meta
	{
		public const string EntityLogicalName = "{{step.primary_entity_definition.logical_name}}";
		public const string EntityLogicalCollectionName = "{{step.primary_entity_definition.logical_collection_name}}";
		public const string EntitySetName = "{{step.primary_entity_definition.entity_set_name}}";
		public const string PrimaryNameAttribute = "{{step.primary_entity_definition.primary_name_atribute}}";
		public const string PrimaryIdAttribute = "{{step.primary_entity_definition.primary_id_attribute}}";

		public partial class Fields
		{
		{{~for attribute in step.primary_entity_definition.attributes | array.filter @supported_attribute~}}
			public const string {{attribute.schema_name}} = "{{attribute.logical_name}}";
			{{~if attribute.attribute_type == 'Lookup' || attribute.attribute_type == 'Customer'~}}
			public static readonly ReadOnlyCollection<string> {{attribute.schema_name}}Targets = new ([{{attribute.targets | array.join ',' @quote}}]);
			{{~end~}}
		{{~end~}}
		}

		public partial class Choices
		{
		{{~for attribute_meta in step.primary_entity_definition.attributes | filter_enum_attributes~}}
		{{~if attribute_meta.option_set != null~}}
		{{~if (attribute_meta.option_set.description.localized_labels | array.first)?.label~}}
			/// <summary>
			/// {{attribute_meta.option_set.description.localized_labels[0].label}}
			/// </summary>
		{{~end~}}
			[DataContract]
			{{~enum_name = attribute_meta.option_set.display_name.localized_labels[0].label | tokenize~}}
			public enum {{enum_name}}
			{
			{{~for option_meta in attribute_meta.option_set.options~}}
				[EnumMember]
				{{option_meta.label.localized_labels[0].label | tokenize}} = {{option_meta.value}},
			{{~end~}}
			}
		{{~end~}}
		{{~end~}}
		}
	}

{{~for attribute in step.primary_entity_definition.attributes | array.filter @supported_attribute~}}
	{{~description = attribute.description?.localized_labels[0]?.label~}}
	/// <summary>
	{{~if description != null && description.length > 0~}}</br>
	/// {{description}}
	{{~end~}}
	{{~ if attribute.attribute_of != null && !attribute.attribute_of.empty?~}}
	/// Attribute of: {{attribute.attribute_of}}</br>
	{{~end~}}
	{{~if attribute.max_length~}}
	/// Max Length: {{attribute.max_length}}</br>
	{{~end~}}
	/// Required Level: {{attribute.required_level.value}}</br>
	/// Valid for: {{~ attribute.is_valid_for_create ? ' Create' : null ~}}{{attribute.is_valid_for_update ? ' Update' : null}}{{attribute.is_valid_for_read ? ' Read' : null}}</br>
	{{~if attribute.is_entity_reference_stored~}}
	/// EntityReference Is Stored</br>
	{{~end~}}
	{{~if attribute.targets~}}
	/// Targets: {{attribute.targets | array.join ','}}</br>
	{{~end~}}
	{{~if attribute.auto_number_format && !attribute.auto_number_format.empty?~}}
	/// Auto Number Format: {{attribute.auto_number_format}}
	{{~end~}}
	/// </summary>
	{{~prop_name = attribute.schema_name ~}}
	{{include attribute.attribute_type + '.sbncs' attributes:step.primary_entity_definition.attributes}}
{{~end~}}
}