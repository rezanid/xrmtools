{{~if !attribute.is_valid_for_create && !attribute.is_valid_for_update && !attribute.is_valid_for_read
ret
end~}}
{{~prop_name = attribute.schema_name ~}}
{{~if attribute.option_set?.is_global == true && model.global_option_set_code_gen.mode == 'GlobalOptionSetFile'
		enum_name = config.default_namespace + '.OptionSets.' + (attribute.option_set?.display_name | get_label 1033 | tokenize)
   else
		enum_name = (base_class_name ?? entity_definition.schema_name) + '.Meta.OptionSets.' + (attribute.option_set?.display_name | get_label 1033 | tokenize)
   end~}}
[AttributeLogicalName("{{attribute.logical_name}}")]
public {{enum_name}}? {{prop_name}}
{
	{{~if attribute.is_valid_for_read~}}
	get => TryGetAttributeValue("{{attribute.logical_name}}", out OptionSetValue opt) && opt != null ? ({{enum_name}}?)opt.Value : null;
	{{~end~}}
	{{~if !force_readonly && (attribute.is_valid_for_create || attribute.is_valid_for_update)~}}
	set => this["{{attribute.logical_name}}"] = value == null ? null : new OptionSetValue((int)value);
	{{~end~}}
}