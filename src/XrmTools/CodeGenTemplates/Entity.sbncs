{{~func non_logical; ret ($0?.is_logical != true); end~}}
{{~func logical; ret ($0?.is_logical == true); end~}}
{{~func supported_attribute; ret ($0 && !$0?.is_primary_id && $0.attribute_type != 'EntityName') && ($0.is_valid_for_create || $0.is_valid_for_update || $0.is_valid_for_read); end~}}
{{~quote(text) = '"' + text + '"'~}}
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;

{{~ first_plugin_type = model.plugin_types | array.first ~}}
namespace {{ first_plugin_type?.namespace ?? config.default_namespace }}
{
{{~for entity_definition in model.entity_definitions~}}
{{~base_class_name = entity_definition.schema_name~}}
	/// <summary>
	/// Display Name: {{entity_definition.display_name | get_label 1033}}
	/// </summary>
	{{codegen_attribute}}
	[EntityLogicalName("{{entity_definition.logical_name}}")]
	[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	public partial class {{base_class_name}} : {{model.entities[for.index].base_type}}
	{
		public partial class Meta 
		{
			public const string EntityLogicalName = "{{entity_definition.logical_name}}";
			public const string EntityLogicalCollectionName = "{{entity_definition.logical_collection_name}}";
			public const string EntitySetName = "{{entity_definition.entity_set_name}}";
			public const string PrimaryNameAttribute = "{{entity_definition.primary_name_attribute}}";
			public const string PrimaryIdAttribute = "{{entity_definition.primary_id_attribute}}";

			public partial class Fields
			{
			{{~for attribute in entity_definition.attributes | array.filter @supported_attribute~}}
				public const string {{attribute.schema_name}} = "{{attribute.logical_name}}";
				{{~if attribute.attribute_type == 'Lookup' || attribute.attribute_type == 'Customer'~}}
				public static readonly ReadOnlyCollection<string> {{attribute.schema_name}}Targets = new ReadOnlyCollection<string>(new string[] { {{attribute.targets | array.join ',' @quote}} });
				{{~end~}}
			{{~end~}}

			{{~if entity_definition.attributes.size < 32~}}
				public static bool TryGet(string logicalName, out string attribute)
				{
					switch (logicalName)
					{
					{{~for attribute in entity_definition.attributes | array.filter @supported_attribute~}}
						case nameof({{attribute.schema_name}}): attribute = {{attribute.schema_name}}; return true;
					{{~end~}}
						default: attribute = null; return false;
					}
				}
			{{~else~}}
				private static readonly Dictionary<string, string> _fieldMap = new Dictionary<string, string>
				{
				{{~for attribute in entity_definition.attributes | array.filter @supported_attribute~}}
					[nameof({{attribute.schema_name}})] = {{attribute.schema_name}},
				{{~end~}}
				};

				public static bool TryGet(string logicalName, out string attribute)
				{
					return _fieldMap.TryGetValue(logicalName, out attribute);
				}
			{{~end~}}

				public string this[string logicalName]
				{
					get => TryGet(logicalName, out var value)
						? value
						: throw new ArgumentException("Invalid attribute logical name.", nameof(logicalName));
				}
			}
			{{~enum_attributes = model.global_option_set_code_gen.mode == 'GlobalOptionSetFile' ? (entity_definition.attributes | filter_local_enum_attributes) : (entity_definition.attributes | filter_enum_attributes)~}}
			{{~if enum_attributes && !(enum_attributes.empty?)}}
			public partial class OptionSets
			{
			{{~for attribute_meta in enum_attributes~}}
			{{~if attribute_meta.option_set != null~}}
			{{~if !(attribute_meta.option_set.description | get_label 1033 | string.empty)~}}
				/// <summary>
				/// {{attribute_meta.option_set.description | get_label 1033}}
				/// </summary>
			{{~end~}}
				[DataContract]
				{{~enum_name = attribute_meta.option_set.display_name | get_label 1033 | tokenize~}}
				public enum {{enum_name}}
				{
				{{~for option_meta in attribute_meta.option_set.options~}}
					[EnumMember] {{option_meta.label | get_label 1033 | tokenize}} = {{option_meta.value}},
				{{~end~}}
				}
			{{~end~}}
			{{~end~}}
			}
			{{~end~}}
		}

		{{~for attribute in entity_definition.attributes | array.filter @supported_attribute~}}
		{{~description = attribute.description | get_label 1033~}}
		/// <summary>
		{{~if description != null && description.length > 0~}}
		/// {{description}}<br/>
		{{~end~}}
		{{~ if attribute.attribute_of != null && !(attribute.attribute_of.empty?)~}}
		/// Attribute of: {{attribute.attribute_of}}<br/>
		{{~end~}}
		{{~if attribute.max_length~}}
		/// Max Length: {{attribute.max_length}}<br/>
		{{~end~}}
		/// Required Level: {{attribute.required_level.value}}<br/>
		/// Valid for:{{~ attribute.is_valid_for_create ? ' Create' : null ~}}{{attribute.is_valid_for_update ? ' Update' : null}}{{attribute.is_valid_for_read ? ' Read' : null}}<br/>
		{{~if attribute.is_entity_reference_stored~}}
		/// EntityReference Is Stored<br/>
		{{~end~}}
		{{~if attribute.targets~}}
		/// Targets: {{attribute.targets | array.join ','}}<br/>
		{{~end~}}
		{{~if attribute.auto_number_format && !(attribute.auto_number_format.empty?)~}}
		/// Auto Number Format: {{attribute.auto_number_format}}
		{{~end~}}
		/// </summary>
		{{~prop_name = attribute.schema_name ~}}
		{{include attribute.attribute_type + '.sbncs' attributes:entity_definition.attributes}}
		{{~end~}}
		public {{base_class_name}}() : base(Meta.EntityLogicalName) { }
		public {{base_class_name}}(Guid id) : base(Meta.EntityLogicalName, id) { }
		public {{base_class_name}}(string keyName, object keyValue) : base(Meta.EntityLogicalName, keyName, keyValue) { }
		public {{base_class_name}}(KeyAttributeCollection keyAttributes) : base(Meta.EntityLogicalName, keyAttributes) { }
	}
{{~end~}}
}