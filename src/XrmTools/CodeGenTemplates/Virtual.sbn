{{~if !attribute.is_valid_for_read; ret; end~}}
[AttributeLogicalName("{{attribute.logical_name}}")]
{{~case attribute.attribute_type_name.value~}}
{{~when 'FileType'~}}
public Guid? {{prop_name}}
{
	get => TryGetAttributeValue("{{attribute.logical_name}}", out Guid value) ? value : null;
}
{{~when 'StringType'~}}
public string {{prop_name}}
{
	get => TryGetAttributeValue("{{attribute.logical_name}}", out string value) ? value : null;
}
{{~when 'VirtualType'~}}
public string {{prop_name}}
{
	{{~parent_attribute = $.attributes | get_attribute_by_name attribute.attribute_of~}}
	get => FormattedValues.Contains("{{(parent_attribute??attribute).logical_name}}") ? FormattedValues["{{attribute.logical_name}}"] : null;
}
{{~when 'ImageType'~}}
public byte[] {{prop_name}}
{
	get => TryGetAttributeValue("{{attribute.logical_name}}", out byte[] value) ? value : null;
	{{~if !force_readonly && (attribute.is_valid_for_create || attribute.is_valid_for_update)~}}
	set => this["{{attribute.logical_name}}"] = value;
	{{~end~}}
}
{{~else~}}
{{~if attribute.option_set
    enum_type = attribute.option_set.display_name.localized_labels[0].label | tokenize | do; ret base_class_name + '.Choices.' + $0;end;
else
	enum_type = int
end~}}
public IEnumerable<{{enum_type}}> {{prop_name}}
{
	get => TryGetAttributeValue("{{attribute.logical_name}}", out OptionSetValueCollection opts) && opts != null ? opts.Select(opt => ({{enum_type}})opt.Value) : [];
	{{~if !force_readonly && (attribute.is_valid_for_create || attribute.is_valid_for_update)~}}
	set => this["{{attribute.logical_name}}"] = value == null || !value.Any() ? null : new OptionSetValueCollection(value.Select(each => new OptionSetValue((int)each)).ToList());
	{{~end~}}
}
{{~end~}}