{{~if !attribute.is_valid_for_create && !attribute.is_valid_for_update && !attribute.is_valid_for_read
ret
end~}}
{{~prop_name = attribute.schema_name ~}}
[AttributeLogicalName("{{attribute.logical_name}}")]
public EntityReference {{prop_name}}
{
	{{~if attribute.is_valid_for_read~}}
	get => TryGetAttributeValue("{{attribute.logical_name}}", out EntityReference value) ? value : null;
	{{~end~}}
	{{~if !force_readonly && (attribute.is_valid_for_create || attribute.is_valid_for_update)~}}
	set
	{
		if (!{{base_class_name + '.Fields.' + prop_name}}Targets.Contains(value.LogicalName))
		{
			throw new InvalidPluginExecutionException($"{value.LogicalName}:{value.Id} is not a valid {{prop_name}}. The only valid references are {{attribute.targets | array.join ', '}}");			
		}
		this["{{attribute.logical_name}}"] = value;
	}
	{{~end~}}
}
