{{~func non_logical; ret ($0?.is_logical != true); end~}}
{{~func logical; ret ($0?.is_logical == true); end~}}
{{~quote(text) = '"' + text + '"'~}}
using AG.RM.Xrm.Utility;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using System;
using System.CodeDom.Compiler;
using System.Collections.ObjectModel;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;

namespace {{ config.default_namespace }};
{{~for entity_definition in model.entity_definitions~}}
{{~base_class_name = entity_definition.display_name.localized_labels[0].label | tokenize}}
[EntityLogicalName("{{entity_definition.logical_name}}")]
public class {{base_class_name}} : Entity
{
	public const string EntityLogicalName = "{{entity_definition.logical_name}}";
	public const string EntityLogicalCollectionName = "{{entity_definition.logical_collection_name}}";
	public const string EntitySetName = "{{entity_definition.entity_set_name}}";
	public const int EntityTypeCode = {{entity_definition.object_type_code}};
	public const string PrimaryNameAttribute = "{{entity_definition.primary_name_atribute}}";
	public const string PrimaryIdAttribute = "{{entity_definition.primary_id_attribute}}";

	public partial class Fields
	{
	{{~for attribute in entity_definition.attributes~}}
		{{~localized_name = attribute | safe_display_name entity_definition.attributes~}}
		public const string {{localized_name}} = "{{attribute.logical_name}}";
		{{~if attribute.attribute_type == 'Lookup' || attribute.attribute_type == 'Customer'~}}
		public static readonly ReadOnlyCollection<string> {{attribute.display_name?.localized_labels[0]?.label | tokenize}}Targets = new ([{{attribute.targets | array.join ',' @quote}}]);
		{{~end~}}
	{{~end~}}
	}

	public partial class Choices
	{
	{{~for attribute_meta in entity_definition.attributes | filter_enum_attributes~}}
	{{~if attribute_meta.option_set != null~}}
	{{~if attribute_meta.option_set.description.localized_labels[0].label != ''~}}
		/// <summary>
		/// {{attribute_meta.option_set.description.localized_labels[0].label}}
		/// </summary>
	{{~end~}}
		{{codegen_attribute}}
		[DataContract]
		{{~enum_name = attribute_meta.option_set.display_name.localized_labels[0].label | tokenize~}}
		public enum {{enum_name}}
		{
		{{~for option_meta in attribute_meta.option_set.options~}}
			[EnumMember]
			{{option_meta.label.user_localized_label.label | tokenize}} = {{option_meta.value}},
		{{~end~}}
		}
	{{~end~}}
	{{~end~}}
	}

	{{~for attribute in entity_definition.attributes~}}
	{{~description = attribute.description?.localized_labels[0]?.label~}}
	/// <summary>
	{{~if description != null && description.length > 0~}}
	/// {{description}}
	{{~end~}}
	{{~ if !attribute.attribute_of.empty?~}}
	/// Attribute of: {{attribute.attribute_of}}
	{{~end~}}
	{{~if attribute.max_length~}}
	/// Max Length: {{attribute.max_length}}
	{{~end~}}
	/// Required Level: {{attribute.required_level.value}}
	/// Valid for: {{~ attribute.is_valid_for_create ? ' Create' : null ~}}{{attribute.is_valid_for_update ? ' Update' : null}}{{attribute.is_valid_for_read ? ' Read' : null}}
	{{~if attribute.is_entity_reference_stored~}}
	/// EntityReference Is Stored
	{{~end~}}
	{{~if attribute.targets~}}
	/// Targets: {{attribute.targets | array.join ','}}
	{{~end~}}
	/// </summary>
	{{~## There should be a template for each entity type.
	     Send the attribute along with the full list of attributes in case template needs it.##~}}
	{{include attribute.attribute_type + '.sbn'}}
	{{~end~}}
	public {{base_class_name}}() : base(EntityLogicalName) { }
    public {{base_class_name}}(string keyName, object keyValue) : base(EntityLogicalName, keyName, keyValue) { }
    public {{base_class_name}}(KeyAttributeCollection keyAttributes) : base(EntityLogicalName, keyAttributes) { }
}
{{~end~}}

{{~for plugintype in model.plugin_types~}}
{{~for step in plugintype.steps~}}
{{codegen_attribute}}
public partial class {{plugintype.type_name | last_segment }} : PluginDefinition<{{plugintype.type_name | last_segment}}Manager>, IPlugin
{
	{{include 'Target.sbn'}}
	{{~if step.images.length > 0~}}
	{{include 'Images.sbn'}}
	{{~end}}
}
public partial class {{plugintype.type_name | last_segment }}Manager : {{step.message_name}}PluginManager
{
	{{codegen_attribute}} public {{plugintype.type_name | last_segment }}Manager() : base("{{step.primary_entity_name}}", EStage.{{step.stage_name}}) { }

	new {{plugintype.type_name | last_segment }}.Target{{step.primary_entity_definition.display_name.localized_labels[0].label | tokenize}} Target => Target.ToEntity<{{plugintype.type_name | last_segment }}.Target{{step.primary_entity_definition.display_name.localized_labels[0].label | tokenize}}>();
	{{~for image in step.images~}}
	new {{plugintype.type_name | last_segment }}.{{image.name}}{{step.primary_entity_definition.display_name.localized_labels[0].label | tokenize}} {{image.name}} => {{image.name}}.ToEntity<{{plugintype.type_name | last_segment }}.{{image.name}}{{step.primary_entity_definition.display_name.localized_labels[0].label | tokenize}}>();
	{{~end~}}
}
{{~end~}}
{{~end~}}