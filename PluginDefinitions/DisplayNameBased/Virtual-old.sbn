{{~if !attribute.is_valid_for_create && !attribute.is_valid_for_update && !attribute.is_valid_for_read
ret
end~}}
[AttributeLogicalName("{{attribute.logical_name}}")]
{{~if attribute.is_logical~}}
{{~if attribute.is_valid_for_read~}}
public string {{attribute | safe_display_name attributes}}
{
	get => TryGetAttributeValue("{{attribute.logical_name}}", out string value) ? value : null;
}
{{~end~}}
{{~else~}}
{{~if attribute.option_set
    enum_type = attribute.option_set.display_name.localized_labels[0].label | tokenize | do; ret base_class_name + '.Choices.' + $0;end;
else
	enum_type = int
end~}}
public IEnumerable<{{enum_type}}> {{attribute | safe_display_name attributes}}
{
	{{~if attribute.is_valid_for_read~}}
	get => TryGetAttributeValue("{{attribute.logical_name}}", out OptionSetValueCollection opts) && opts != null ? opts.Select(opt => ({{enum_type}})Enum.ToObject(typeof({{enum_type}}), opt.Value)) : [];
	{{~end~}}
	{{~if attribute.is_valid_for_create || attribute.is_valid_for_update~}}
	set => this["{{attribute.logical_name}}"] = value == null || !value.Any() ? null : new OptionSetValueCollection(value.Select(each => new OptionSetValue(((IConvertible)each).ToInt32((IFormatProvider)CultureInfo.InvariantCulture))).ToList());
	{{~end~}}
}
{{~end~}}